// Generated by Dagger (https://dagger.dev).
package com.daya.moviecatalogue.ui.main.tvshow;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.daya.moviecatalogue.HiltTestActivity;
import com.daya.moviecatalogue.data.LocalPersistRepository;
import com.daya.moviecatalogue.data.db.MovieCatDatabase;
import com.daya.moviecatalogue.data.main.LocalDetailDataSource;
import com.daya.moviecatalogue.data.main.LocalMainDataSource;
import com.daya.moviecatalogue.data.main.LocalPersistDataSource;
import com.daya.moviecatalogue.data.main.MainRepository;
import com.daya.moviecatalogue.data.main.RemoteDetailDataSource;
import com.daya.moviecatalogue.data.main.RemoteMainDataSource;
import com.daya.moviecatalogue.data.main.movie.local.MovieDao;
import com.daya.moviecatalogue.data.main.tvshow.local.TvShowDao;
import com.daya.moviecatalogue.di.LocalModule;
import com.daya.moviecatalogue.di.LocalModule_ProvideTvShowDaoFactory;
import com.daya.moviecatalogue.di.LocalModule_ProvidesDatabaseFactory;
import com.daya.moviecatalogue.di.LocalModule_ProvidesMovieDaoFactory;
import com.daya.moviecatalogue.di.NetworkModule;
import com.daya.moviecatalogue.di.NetworkModule_ProvideApiInterceptorFactory;
import com.daya.moviecatalogue.di.NetworkModule_ProvideMovieDbApiFactory;
import com.daya.moviecatalogue.di.NetworkModule_ProvideRetrofitFactory;
import com.daya.moviecatalogue.di.NetworkModule_ProvidesHttpUrlFactory;
import com.daya.moviecatalogue.di.ReaderModule;
import com.daya.moviecatalogue.di.ReaderModule_ProvideMoshiFactory;
import com.daya.moviecatalogue.di.TheMovieDbApi;
import com.daya.moviecatalogue.di.coroutine.CoroutineModules;
import com.daya.moviecatalogue.di.coroutine.CoroutineModules_ProvideAplicationScopeFactory;
import com.daya.moviecatalogue.di.coroutine.CoroutineModules_ProvidesIoDispatcherFactory;
import com.daya.moviecatalogue.ui.MovieCatApplication;
import com.daya.moviecatalogue.ui.detail.DetailActivity;
import com.daya.moviecatalogue.ui.detail.DetailViewModel;
import com.daya.moviecatalogue.ui.detail.DetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.daya.moviecatalogue.ui.main.MainActivity;
import com.daya.moviecatalogue.ui.main.favorite.movie.MovieFavFragment;
import com.daya.moviecatalogue.ui.main.favorite.movie.MovieFavViewModel;
import com.daya.moviecatalogue.ui.main.favorite.movie.MovieFavViewModel_HiltModules_KeyModule_ProvideFactory;
import com.daya.moviecatalogue.ui.main.favorite.tvshow.TvShowFavFragment;
import com.daya.moviecatalogue.ui.main.favorite.tvshow.TvShowFavViewModel;
import com.daya.moviecatalogue.ui.main.favorite.tvshow.TvShowFavViewModel_HiltModules_KeyModule_ProvideFactory;
import com.daya.moviecatalogue.ui.main.foryou.movie.MovieFragment;
import com.daya.moviecatalogue.ui.main.foryou.movie.MovieViewModel;
import com.daya.moviecatalogue.ui.main.foryou.movie.MovieViewModel_HiltModules_KeyModule_ProvideFactory;
import com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowFragment;
import com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowFragmentTest;
import com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowViewModel;
import com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.squareup.moshi.Moshi;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerTvShowFragmentTest_HiltComponents_SingletonC extends TvShowFragmentTest_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object moshi = new MemoizedSentinel();

  private volatile Object httpUrl = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object theMovieDbApi = new MemoizedSentinel();

  private volatile Object remoteDetailDataSource = new MemoizedSentinel();

  private volatile Object remoteMainDataSource = new MemoizedSentinel();

  private volatile Object mainRepository = new MemoizedSentinel();

  private volatile Object movieCatDatabase = new MemoizedSentinel();

  private volatile Object movieDao = new MemoizedSentinel();

  private volatile Object tvShowDao = new MemoizedSentinel();

  private volatile Object localPersistDataSource = new MemoizedSentinel();

  private volatile Object localMainDataSource = new MemoizedSentinel();

  private volatile Object localDetailDataSource = new MemoizedSentinel();

  private volatile Object coroutineScope = new MemoizedSentinel();

  private volatile Object localPersistRepository = new MemoizedSentinel();

  private DaggerTvShowFragmentTest_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideApiInterceptorFactory.provideApiInterceptor();
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Moshi moshi() {
    Object local = moshi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = moshi;
        if (local instanceof MemoizedSentinel) {
          local = ReaderModule_ProvideMoshiFactory.provideMoshi();
          moshi = DoubleCheck.reentrantCheck(moshi, local);
        }
      }
    }
    return (Moshi) local;
  }

  private HttpUrl httpUrl() {
    Object local = httpUrl;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = httpUrl;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvidesHttpUrlFactory.providesHttpUrl();
          httpUrl = DoubleCheck.reentrantCheck(httpUrl, local);
        }
      }
    }
    return (HttpUrl) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideRetrofitFactory.provideRetrofit(okHttpClient(), moshi(), httpUrl());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private TheMovieDbApi theMovieDbApi() {
    Object local = theMovieDbApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = theMovieDbApi;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideMovieDbApiFactory.provideMovieDbApi(retrofit());
          theMovieDbApi = DoubleCheck.reentrantCheck(theMovieDbApi, local);
        }
      }
    }
    return (TheMovieDbApi) local;
  }

  private RemoteDetailDataSource remoteDetailDataSource() {
    Object local = remoteDetailDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = remoteDetailDataSource;
        if (local instanceof MemoizedSentinel) {
          local = new RemoteDetailDataSource(theMovieDbApi());
          remoteDetailDataSource = DoubleCheck.reentrantCheck(remoteDetailDataSource, local);
        }
      }
    }
    return (RemoteDetailDataSource) local;
  }

  private RemoteMainDataSource remoteMainDataSource() {
    Object local = remoteMainDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = remoteMainDataSource;
        if (local instanceof MemoizedSentinel) {
          local = new RemoteMainDataSource(theMovieDbApi());
          remoteMainDataSource = DoubleCheck.reentrantCheck(remoteMainDataSource, local);
        }
      }
    }
    return (RemoteMainDataSource) local;
  }

  private MainRepository mainRepository() {
    Object local = mainRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = mainRepository;
        if (local instanceof MemoizedSentinel) {
          local = new MainRepository(remoteDetailDataSource(), remoteMainDataSource());
          mainRepository = DoubleCheck.reentrantCheck(mainRepository, local);
        }
      }
    }
    return (MainRepository) local;
  }

  private MovieCatDatabase movieCatDatabase() {
    Object local = movieCatDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieCatDatabase;
        if (local instanceof MemoizedSentinel) {
          local = LocalModule_ProvidesDatabaseFactory.providesDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          movieCatDatabase = DoubleCheck.reentrantCheck(movieCatDatabase, local);
        }
      }
    }
    return (MovieCatDatabase) local;
  }

  private MovieDao movieDao() {
    Object local = movieDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = movieDao;
        if (local instanceof MemoizedSentinel) {
          local = LocalModule_ProvidesMovieDaoFactory.providesMovieDao(movieCatDatabase());
          movieDao = DoubleCheck.reentrantCheck(movieDao, local);
        }
      }
    }
    return (MovieDao) local;
  }

  private TvShowDao tvShowDao() {
    Object local = tvShowDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = tvShowDao;
        if (local instanceof MemoizedSentinel) {
          local = LocalModule_ProvideTvShowDaoFactory.provideTvShowDao(movieCatDatabase());
          tvShowDao = DoubleCheck.reentrantCheck(tvShowDao, local);
        }
      }
    }
    return (TvShowDao) local;
  }

  private LocalPersistDataSource localPersistDataSource() {
    Object local = localPersistDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = localPersistDataSource;
        if (local instanceof MemoizedSentinel) {
          local = new LocalPersistDataSource(movieDao(), tvShowDao());
          localPersistDataSource = DoubleCheck.reentrantCheck(localPersistDataSource, local);
        }
      }
    }
    return (LocalPersistDataSource) local;
  }

  private LocalMainDataSource localMainDataSource() {
    Object local = localMainDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = localMainDataSource;
        if (local instanceof MemoizedSentinel) {
          local = new LocalMainDataSource(movieDao(), tvShowDao());
          localMainDataSource = DoubleCheck.reentrantCheck(localMainDataSource, local);
        }
      }
    }
    return (LocalMainDataSource) local;
  }

  private LocalDetailDataSource localDetailDataSource() {
    Object local = localDetailDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = localDetailDataSource;
        if (local instanceof MemoizedSentinel) {
          local = new LocalDetailDataSource(movieDao(), tvShowDao());
          localDetailDataSource = DoubleCheck.reentrantCheck(localDetailDataSource, local);
        }
      }
    }
    return (LocalDetailDataSource) local;
  }

  private CoroutineScope coroutineScope() {
    Object local = coroutineScope;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = coroutineScope;
        if (local instanceof MemoizedSentinel) {
          local = CoroutineModules_ProvideAplicationScopeFactory.provideAplicationScope();
          coroutineScope = DoubleCheck.reentrantCheck(coroutineScope, local);
        }
      }
    }
    return (CoroutineScope) local;
  }

  private LocalPersistRepository localPersistRepository() {
    Object local = localPersistRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = localPersistRepository;
        if (local instanceof MemoizedSentinel) {
          local = new LocalPersistRepository(localPersistDataSource(), localMainDataSource(), localDetailDataSource(), coroutineScope(), CoroutineModules_ProvidesIoDispatcherFactory.providesIoDispatcher());
          localPersistRepository = DoubleCheck.reentrantCheck(localPersistRepository, local);
        }
      }
    }
    return (LocalPersistRepository) local;
  }

  @Override
  public void injectMovieCatApplication(MovieCatApplication movieCatApplication) {
  }

  @Override
  public void injectTest(TvShowFragmentTest tvShowFragmentTest) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coroutineModules(CoroutineModules coroutineModules) {
      Preconditions.checkNotNull(coroutineModules);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder localModule(LocalModule localModule) {
      Preconditions.checkNotNull(localModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder readerModule(ReaderModule readerModule) {
      Preconditions.checkNotNull(readerModule);
      return this;
    }

    public TvShowFragmentTest_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerTvShowFragmentTest_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements TvShowFragmentTest_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public TvShowFragmentTest_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends TvShowFragmentTest_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements TvShowFragmentTest_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public TvShowFragmentTest_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends TvShowFragmentTest_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectHiltTestActivity(HiltTestActivity hiltTestActivity) {
      }

      @Override
      public void injectDetailActivity(DetailActivity detailActivity) {
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return ImmutableSet.<String>of(DetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MovieFavViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MovieViewModel_HiltModules_KeyModule_ProvideFactory.provide(), TvShowFavViewModel_HiltModules_KeyModule_ProvideFactory.provide(), TvShowViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements TvShowFragmentTest_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public TvShowFragmentTest_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends TvShowFragmentTest_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectMovieFavFragment(MovieFavFragment movieFavFragment) {
        }

        @Override
        public void injectTvShowFavFragment(TvShowFavFragment tvShowFavFragment) {
        }

        @Override
        public void injectMovieFragment(MovieFragment movieFragment) {
        }

        @Override
        public void injectTvShowFragment(TvShowFragment tvShowFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements TvShowFragmentTest_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public TvShowFragmentTest_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends TvShowFragmentTest_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements TvShowFragmentTest_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public TvShowFragmentTest_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends TvShowFragmentTest_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements TvShowFragmentTest_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public TvShowFragmentTest_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends TvShowFragmentTest_HiltComponents.ViewModelC {
      private volatile Provider<DetailViewModel> detailViewModelProvider;

      private volatile Provider<MovieFavViewModel> movieFavViewModelProvider;

      private volatile Provider<MovieViewModel> movieViewModelProvider;

      private volatile Provider<TvShowFavViewModel> tvShowFavViewModelProvider;

      private volatile Provider<TvShowViewModel> tvShowViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private DetailViewModel detailViewModel() {
        return new DetailViewModel(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.mainRepository(), DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.localPersistRepository());
      }

      private Provider<DetailViewModel> detailViewModelProvider() {
        Object local = detailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          detailViewModelProvider = (Provider<DetailViewModel>) local;
        }
        return (Provider<DetailViewModel>) local;
      }

      private MovieFavViewModel movieFavViewModel() {
        return new MovieFavViewModel(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.localPersistRepository());
      }

      private Provider<MovieFavViewModel> movieFavViewModelProvider() {
        Object local = movieFavViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          movieFavViewModelProvider = (Provider<MovieFavViewModel>) local;
        }
        return (Provider<MovieFavViewModel>) local;
      }

      private MovieViewModel movieViewModel() {
        return new MovieViewModel(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.mainRepository());
      }

      private Provider<MovieViewModel> movieViewModelProvider() {
        Object local = movieViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          movieViewModelProvider = (Provider<MovieViewModel>) local;
        }
        return (Provider<MovieViewModel>) local;
      }

      private TvShowFavViewModel tvShowFavViewModel() {
        return new TvShowFavViewModel(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.localPersistRepository());
      }

      private Provider<TvShowFavViewModel> tvShowFavViewModelProvider() {
        Object local = tvShowFavViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          tvShowFavViewModelProvider = (Provider<TvShowFavViewModel>) local;
        }
        return (Provider<TvShowFavViewModel>) local;
      }

      private TvShowViewModel tvShowViewModel() {
        return new TvShowViewModel(DaggerTvShowFragmentTest_HiltComponents_SingletonC.this.mainRepository());
      }

      private Provider<TvShowViewModel> tvShowViewModelProvider() {
        Object local = tvShowViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          tvShowViewModelProvider = (Provider<TvShowViewModel>) local;
        }
        return (Provider<TvShowViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return ImmutableMap.<String, Provider<ViewModel>>of("com.daya.moviecatalogue.ui.detail.DetailViewModel", (Provider) detailViewModelProvider(), "com.daya.moviecatalogue.ui.main.favorite.movie.MovieFavViewModel", (Provider) movieFavViewModelProvider(), "com.daya.moviecatalogue.ui.main.foryou.movie.MovieViewModel", (Provider) movieViewModelProvider(), "com.daya.moviecatalogue.ui.main.favorite.tvshow.TvShowFavViewModel", (Provider) tvShowFavViewModelProvider(), "com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowViewModel", (Provider) tvShowViewModelProvider());
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.daya.moviecatalogue.ui.detail.DetailViewModel 
            return (T) ViewModelCImpl.this.detailViewModel();

            case 1: // com.daya.moviecatalogue.ui.main.favorite.movie.MovieFavViewModel 
            return (T) ViewModelCImpl.this.movieFavViewModel();

            case 2: // com.daya.moviecatalogue.ui.main.foryou.movie.MovieViewModel 
            return (T) ViewModelCImpl.this.movieViewModel();

            case 3: // com.daya.moviecatalogue.ui.main.favorite.tvshow.TvShowFavViewModel 
            return (T) ViewModelCImpl.this.tvShowFavViewModel();

            case 4: // com.daya.moviecatalogue.ui.main.foryou.tvshow.TvShowViewModel 
            return (T) ViewModelCImpl.this.tvShowViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements TvShowFragmentTest_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public TvShowFragmentTest_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends TvShowFragmentTest_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
